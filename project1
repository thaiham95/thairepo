/* myexec.c */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <iostream>
#include <unistd.h>
#include <vector>
using namespace std;

#define ALLOWINPUTLENGTH 128 
#define ALLOWARGLENGTH 32
void inputCommand(int argc, char *argv1[]);
void resourcePrint(double beginTime);
void backgroundPrint(int pid);

typedef struct backGroundProcess
{
	int pid;
	char * command;
	struct backGroundProcess* nxtProcess;
	struct backGroundProcess* prevProcess;
} backGroundProcess;

backGroundProcess* headProcess = NULL;
backGroundProcess* tailProcess = NULL;

backGroundProcess* get_process(int pid)
{
	backGroundProcess* process = headProcess; // looping through process pool starting from the head
	while (process != NULL)
	{
		if (process->pid == pid)
		{
			return process;
		}
		process = process->nxtProcess;
	}
	return NULL;
}

void processDel(int pid)
{
	backGroundProcess *process = get_process(pid);
	backGroundProcess *temp;
	if (process == NULL)
	{
		cout << "No background process found to be removed" << endl;
	}
	else
	{
		cout << "PROCESS COMPLETED IS " << process->pid << endl;

		if (process == headProcess && process->nxtProcess != NULL) // if it is normal head
		{
			temp = headProcess;
			headProcess = process->nxtProcess;
			free(temp);
		}
		else if (process == tailProcess && process->prevProcess != NULL) // if it is normal tail
		{
			temp = tailProcess;
			tailProcess = process->prevProcess;
			free(temp);
		}

		else if (process->prevProcess == NULL && process->nxtProcess == NULL) // if the only process
		{
			cout << "the background is now empty" << endl;
			headProcess = NULL;
			tailProcess = NULL;
			free(process);
		}
		else if (process->prevProcess != NULL && process->nxtProcess != NULL) // normal process in middle of pool
		{
			temp = process;
			process->prevProcess->nxtProcess = process->nxtProcess;
			process->nxtProcess->prevProcess = process->prevProcess;
			free(process);
		}
	}
}

void processAdd(int pid, char* commandG)
{
	backGroundProcess* Process = (backGroundProcess*)malloc(sizeof(backGroundProcess));
	if (Process == NULL)
	{
		cout << "no available memory" << endl;
	}
	else{
		Process->pid = pid;
		Process->command = commandG;
		Process->nxtProcess = NULL;
		Process->prevProcess = NULL;
		// adding the new background to set of background
		if (headProcess != NULL) //no background
		{
			tailProcess->nxtProcess = Process;
			Process->prevProcess = tailProcess;
			tailProcess = Process;
		}

		else // if there is already background, make the new one the tail 
		{
			headProcess = Process;
			tailProcess = Process;
		}
	}
}

void checkDeadProcess() // looping through all background process to check if there is dead process to remove and print out
{
	vector<int> deadArray;
	int counter = 0;
	backGroundProcess* process = headProcess;
	while (process != NULL)
	{
		cout << "head pid  is: " << process->pid << endl;
		cout << "head command is: " << process->command << endl;
		if ((waitpid(process->pid, NULL, WNOHANG | WUNTRACED)) > 0)
		{
			cout << "removed pid is:  " << process->pid << endl;
			deadArray.push_back(process->pid);
		}
		process = process->nxtProcess;
	}
	for (int i = 0; i < deadArray.size(); i++)
	{
		backgroundPrint(deadArray.at(i));
		processDel(deadArray.at(i));
	}
}

int main(int argc, char *argv[])
{
	//***
	struct timeval start;
	int pid;
	//***
	char* input = NULL; //^^
	size_t streamSize = 0;
	ssize_t argLength = 0;
	char* inputCmd[ALLOWARGLENGTH];
	char* inArgument = NULL;
	int argNumber = 0;
	int key = 0;
	int toggle = 1;
	int forkKey = 0;
	int backGroundKey = 0;

	if (argc > 1){ // never enter here if being asked for input
		key = 1; //key 1 to go execvp with w argv
		if (strcmp(argv[1], "cd") == 0)
		{
			forkKey = 1; // dont go print statistic
			cout << "DIRECT 2 IS " << argv[2] << endl;
			int a = chdir(argv[2]);
		}

		if (strcmp(argv[1], "exit") == 0)
		{
			forkKey = 1; //dont go print statistic
			toggle = 0; // exit loop
		}

	}

	while (toggle == 1)
	{
		//**
		forkKey = 0;
		toggle = 1;
		argNumber = 0;
		inArgument = NULL;
		streamSize = 0;
		input = NULL;
		argLength = 0;
		backGroundKey = 0;
		checkDeadProcess();
		//**
		if (argc == 1)
		{
			cout << "Input command please:: " << endl;
			argLength = getline(&input, &streamSize, stdin);

			if (argLength > ALLOWINPUTLENGTH)
			{
				cout << "Too Long!!! " << endl;
				toggle = 0;
				forkKey = 1;
			}
			else
			{
				while ((inArgument = strtok(input, " \n")) != NULL)
				{ 
					input = NULL;
					if (argNumber > ALLOWARGLENGTH)
					{
						toggle = 0;
						forkKey = 1;
					}
					inputCmd[argNumber] = inArgument;
					argNumber++;
				}
				inputCmd[argNumber] = NULL;

			}
			//*** cd and exit checking if input type in
			if (strcmp(inputCmd[0], "cd") == 0)
			{
				forkKey = 1;
				int a = chdir(inputCmd[1]);
			}

			if (strcmp(inputCmd[0], "exit") == 0)
			{
				forkKey = 1;
				toggle = 0;
			}

			if (strcmp(inputCmd[argNumber - 1], "&") == 0){
				backGroundKey = 1;
				inputCmd[argNumber - 1] = NULL; // remove the command &
				argNumber--;
			}

			if (strcmp(inputCmd[0], "jobs") == 0)
			{
				if (headProcess == NULL || tailProcess == NULL)
				{
					cout << " nothing in background " << endl;
				}
				else
				{
					backGroundProcess* process = headProcess;
					while (process != NULL)
					{
						cout << "JOBS CALLED" << endl;
						backgroundPrint(process->pid);
						process = process->nxtProcess;
					}
				}
			}
		}
		else if (argc > 1)
		{
			toggle = 0;
		}

		//*** forking starts here
		if (forkKey == 0) {
			if ((pid = fork()) < 0) {
				cerr << "Fork error\n";
				exit(1);
			}
			else if (pid == 0) { // child 
				cout << "child (" << getpid() << ") : " << "\n";

				if (key == 0) // execute with input data
				{

					if ((strcmp(inputCmd[0], "cd") != 0) && (strcmp(inputCmd[0], "exit") != 0))
					{
						execvp(inputCmd[0], inputCmd);
					}
				}
				else // execute with argv
				{
					if ((strcmp(argv[1], "cd") != 0) && (strcmp(argv[1], "exit") != 0))
					{
						execvp(argv[1], argv + 1);
					}
				}
				exit(0);
			}
			else { //parents
				gettimeofday(&start, NULL);
				double beginTime = ((start.tv_sec * 1000) + (start.tv_usec / 1000.0));
				cout << "parent (" << getpid() << ") : " << "\n" << endl;
				if (backGroundKey == 0) // normal operation foreground process
				{
					cout << "normal operation " << endl;
					wait(0);
					resourcePrint(beginTime);
				}
				else // background operation add into the process pool
				{
					cout << "BACKGROUND " << endl;
					if (key == 0) // execute with input data
					{
						processAdd(pid, inputCmd[0]);
					}
					else // execute with argv
					{
						processAdd(pid, argv[1]);
					}
				}

			}
		}
		//***** forking ends
	}
	return 0;
}
void resourcePrint(double time_before){
	struct rusage resource_usage;
	struct timeval current_time;
	gettimeofday(&current_time, NULL);
	getrusage(RUSAGE_CHILDREN, &resource_usage);
	double elapsed_time = (current_time.tv_sec * 1000) + (current_time.tv_usec / 1000.0) - time_before;
	cout << "---------------------------------------" << endl;
	cout << "CPU time User: " << ((resource_usage.ru_utime.tv_sec * 1000) + (resource_usage.ru_utime.tv_usec / 1000.0)) << " milliseconds" << endl;
	cout << "CPU time Sys: " << ((resource_usage.ru_stime.tv_sec * 1000) + (resource_usage.ru_stime.tv_usec / 1000.0)) << " milliseconds" << endl;
	cout << " Gave up CPU voluntarily: " << resource_usage.ru_nvcsw << " times" << endl;
	cout << " Gave up CPU involuntarily: " << resource_usage.ru_nivcsw << " times" << endl;
	cout << " Page faults major: " << resource_usage.ru_majflt << endl;
	cout << " Page faults minor: " << resource_usage.ru_minflt << endl;
	cout << " Max resident: " << resource_usage.ru_maxrss << " kbs" << endl;
	cout << "---------------------------------------" << endl;
}

void backgroundPrint(int pid){
	backGroundProcess * chosenBackground = get_process(pid);
	cout << "---------------------------------------" << endl;
	cout << "command is: " << chosenBackground->command << endl;
	cout << "pid is: " << chosenBackground->pid << endl;
	cout << "---------------------------------------" << endl;

}

